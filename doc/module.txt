

================================================================
                   How  to  write  module
================================================================


Table of contents

1. Types of module
2. Event handler module
  2.1 Static and dynamic modules
  2.2 Function interfaces
  2.3 Process of load/unload a module
3. Transport module
4. Plugin
5. Naming conventions


1. Types of module

   There are four types of module: (1) core; (2) event handler; (3)
   transport; (4) plugin. Core modules are essential components of the
   bot. Event handler modules provide handler functions that will be
   executed when a specified IRC event happens. Transport module
   provides network I/O functions to support the abstract module
   core/transport. Plugin module is external script executed by cbot.

2. Event handler module

2.1 Static and dynamic modules

   Event handler module is loaded in two fasions: statically and
   dynamically. Static module must be put in the modules/ directory and
   is loaded in a global context. Dynamic module can be put anywhere
   and is loaded by the loader.load function in core/loader. Because
   dynamic module is sourced in in a function context, all variables
   created via the 'declare' command will become local variables.

   It is suggested that:

   (1) create global variable:
       <modulename>_<variable>=<value>
   (2) create global indexed array:
       <modulename>_<array-name>=()

   Associative array in a dynamic module will not work because dynamic
   module is loaded in function context where 'declare' is a synonym of
   'local' command.

2.2 Function interfaces

   Refer to doc/testmodule for example.

2.2.1 <module>.install

   This function is called after your module is sourced in. This
   function should write to the variable LOADER_INSTALLSTRING in below
   format:
   LOADER_INSTALLSTRING="event1 func1 event2 func2 ..."
   When IRC event 'event1' happens, 'func1' will be executed.

2.2.2 <module>.uninstall

   This function is called before your module is unloaded. You should
   unset your global variables and functions here. You don't need to
   unset <module>.install/uninstall and event handler functions because
   they are unset by the loader.unload function.

2.3 Process of load/unload a module

   Please refer to the loader.load and loader.unload functions for
   details.

   Load:
   (1) source in your module;
   (2) execute <module>.install;
   (3) add events and handlers in $LOADER_INSTALLSTRING to
       $LOADER_EVENTLIST array;
   (4) add your module to $LOADER_MODULELIST array.

   Unload:
   (1) call <module>.uninstall;
   (2) remove events and handlers from $LOADER_EVENTLIST;
   (3) unset your handler functions;
   (4) unset <module>.install and <module>.uninstall;
   (5) remove your module from $LOADER_MODULELIST.

3. Transport module

   A transport module should implement four functions:
       <module>.connect <module>.disconnect
       <module>.read    <module>.write
   The four functions are called by the transport core module to do
   network I/O. <module>.read should return the read contents in the
   TRANSPORT_READ global variable. The name of transport module must be
   defined in cbot.cfg configuration file. Transport modules must reside
   in transport/ directory.

4. Plugin

   Plugin is executed by cbot as an external command. It can reside
   anywhere. The plugin/ directory is a good place to place plugin
   modules. How to execute a plugin is up to the developer.

5. Naming conventions

   Variables, function names should begin with the module name.
   Variables are in uppercase and function names are in lowercase.
   E.g. YOURMODULE_VAR1, yourmodule.function1

